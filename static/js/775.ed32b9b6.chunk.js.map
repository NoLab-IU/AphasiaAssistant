{"version":3,"file":"static/js/775.ed32b9b6.chunk.js","mappings":"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","sources":["../node_modules/@ffmpeg/ffmpeg/dist/esm/const.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js","../node_modules/@ffmpeg/ffmpeg/dist/esm/types.js"],"sourcesContent":["export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.9\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"FFPROBE\"] = \"FFPROBE\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n","/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n","export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n","import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.FFPROBE:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Execute ffprobe command.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // Getting duration of a video in seconds: ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 video.avi -o output.txt\n     * await ffmpeg.ffprobe([\"-v\", \"error\", \"-show_entries\", \"format=duration\", \"-of\", \"default=noprint_wrappers=1:nokey=1\", \"video.avi\", \"-o\", \"output.txt\"]);\n     * const data = ffmpeg.readFile(\"output.txt\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    ffprobe = (\n    /** ffprobe command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.FFPROBE,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n","export var FFFSType;\n(function (FFFSType) {\n    FFFSType[\"MEMFS\"] = \"MEMFS\";\n    FFFSType[\"NODEFS\"] = \"NODEFS\";\n    FFFSType[\"NODERAWFS\"] = \"NODERAWFS\";\n    FFFSType[\"IDBFS\"] = \"IDBFS\";\n    FFFSType[\"WORKERFS\"] = \"WORKERFS\";\n    FFFSType[\"PROXYFS\"] = \"PROXYFS\";\n})(FFFSType || (FFFSType = {}));\n"],"names":["FFMessageType","getMessageID","messageID","ERROR_NOT_LOADED","Error","ERROR_TERMINATED","FFmpeg","loaded","#registerHandlers","this","onmessage","_ref","data","id","type","LOAD","MOUNT","UNMOUNT","EXEC","FFPROBE","WRITE_FILE","READ_FILE","DELETE_FILE","RENAME","CREATE_DIR","LIST_DIR","DELETE_DIR","LOG","forEach","f","PROGRESS","ERROR","_this","_ref2","trans","arguments","length","undefined","signal","Promise","resolve","reject","postMessage","addEventListener","DOMException","once","on","event","callback","push","off","filter","load","_this2","classWorkerURL","config","Worker","URL","import","exec","_this3","args","timeout","ffprobe","_this4","terminate","ids","Object","keys","writeFile","_this5","path","Uint8Array","buffer","mount","fsType","options","mountPoint","unmount","readFile","_this6","encoding","deleteFile","_this7","rename","_this8","oldPath","newPath","createDir","_this9","listDir","_this10","deleteDir","_this11","FFFSType"],"sourceRoot":""}